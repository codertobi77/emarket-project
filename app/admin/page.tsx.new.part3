            {/* Onglet Marchés */}
            <TabsContent value="markets" className="space-y-6">
              <Card className="shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle>Liste des marchés</CardTitle>
                    <Button 
                      onClick={() => setIsCreateMarketDialogOpen(true)}
                      size="sm"
                      className="bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700 transition-all duration-200"
                    >
                      <Building className="mr-2 h-4 w-4" />
                      Ajouter
                    </Button>
                  </div>
                  <CardDescription>Gérez tous les marchés de la plateforme</CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Marché</TableHead>
                        <TableHead>Localisation</TableHead>
                        <TableHead>Manager</TableHead>
                        <TableHead>Vendeurs</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {markets.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center">
                            Aucun marché trouvé
                          </TableCell>
                        </TableRow>
                      ) : (
                        markets.map((market) => (
                          <TableRow key={market.id}>
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <div className="w-10 h-10 rounded-md overflow-hidden">
                                  <img 
                                    src={
                                      market.image?.startsWith('/markets-img/') ? `/assets${market.image}` :
                                      market.image?.includes('public/assets/') ? `/${market.image.split('public/')[1]}` :
                                      market.image?.includes('assets/') ? `/${market.image}` :
                                      market.image ? `/assets/markets-img/${market.image.split('/').pop()}` :
                                      "https://images.pexels.com/photos/2292919/pexels-photo-2292919.jpeg"
                                    } 
                                    alt={market.name}
                                    className="w-full h-full object-cover"
                                    onError={(e) => {
                                      (e.target as HTMLImageElement).src = "https://images.pexels.com/photos/2292919/pexels-photo-2292919.jpeg";
                                    }}
                                  />
                                </div>
                                <div>
                                  <p className="font-medium">{market.name}</p>
                                  <p className="text-sm text-muted-foreground truncate max-w-[200px]">{market.description}</p>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge variant="outline" className="bg-emerald-50 text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-400">
                                <MapPin className="mr-1 h-3 w-3" />
                                {market.location}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Avatar className="h-8 w-8">
                                  <AvatarImage src={getProfileImage(market.manager?.image)} alt={market.manager?.name} />
                                  <AvatarFallback>{market.manager?.name?.substring(0, 2).toUpperCase() || 'NA'}</AvatarFallback>
                                </Avatar>
                                <span>{market.manager?.name || 'Non assigné'}</span>
                              </div>
                            </TableCell>
                            <TableCell>{market.marketSellers?.length || 0}</TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-4 w-4">
                                      <path d="M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM13.625 7.5C13.625 8.12132 13.1213 8.625 12.5 8.625C11.8787 8.625 11.375 8.12132 11.375 7.5C11.375 6.87868 11.8787 6.375 12.5 6.375C13.1213 6.375 13.625 6.87868 13.625 7.5Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                                    </svg>
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem onClick={() => {
                                    setUpdatedMarket(market);
                                    setIsUpdateMarketDialogOpen(true);
                                  }}>
                                    <Edit className="mr-2 h-4 w-4" />
                                    Modifier
                                  </DropdownMenuItem>
                                  <DropdownMenuItem 
                                    className="text-destructive"
                                    onClick={() => {
                                      setDeletedMarket(market);
                                      setIsDeleteMarketDialogOpen(true);
                                    }}
                                  >
                                    <Trash className="mr-2 h-4 w-4" />
                                    Supprimer
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
            
            {/* Onglet Produits */}
            <TabsContent value="products" className="space-y-6">
              <Card className="shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle>Liste des produits</CardTitle>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm">
                        <Filter className="mr-2 h-4 w-4" />
                        Filtrer
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Exporter
                      </Button>
                    </div>
                  </div>
                  <CardDescription>Tous les produits disponibles sur la plateforme</CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Produit</TableHead>
                        <TableHead>Catégorie</TableHead>
                        <TableHead>Prix</TableHead>
                        <TableHead>Marché</TableHead>
                        <TableHead>Vendeur</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {products.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={6} className="text-center">
                            Aucun produit trouvé
                          </TableCell>
                        </TableRow>
                      ) : (
                        products.map((product) => (
                          <TableRow key={product.id}>
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <div className="w-10 h-10 rounded-md overflow-hidden">
                                  <img 
                                    src={
                                      product.image?.startsWith('/products-img/') ? `/assets${product.image}` :
                                      product.image?.includes('public/assets/') ? `/${product.image.split('public/')[1]}` :
                                      product.image?.includes('assets/') ? `/${product.image}` :
                                      product.image ? `/assets/products-img/${product.image.split('/').pop()}` :
                                      "https://images.pexels.com/photos/264636/pexels-photo-264636.jpeg"
                                    } 
                                    alt={product.name}
                                    className="w-full h-full object-cover"
                                    onError={(e) => {
                                      (e.target as HTMLImageElement).src = "https://images.pexels.com/photos/264636/pexels-photo-264636.jpeg";
                                    }}
                                  />
                                </div>
                                <div>
                                  <p className="font-medium">{product.name}</p>
                                  <p className="text-sm text-muted-foreground truncate max-w-[200px]">{product.description}</p>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>{product.category?.name || 'Non catégorisé'}</TableCell>
                            <TableCell>{product.price.toFixed(2)} €</TableCell>
                            <TableCell>{product.market?.name || 'Non assigné'}</TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Avatar className="h-8 w-8">
                                  <AvatarImage src={getProfileImage(product.seller?.image)} alt={product.seller?.name} />
                                  <AvatarFallback>{product.seller?.name?.substring(0, 2).toUpperCase() || 'NA'}</AvatarFallback>
                                </Avatar>
                                <span>{product.seller?.name || 'Non assigné'}</span>
                              </div>
                            </TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-4 w-4">
                                      <path d="M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM13.625 7.5C13.625 8.12132 13.1213 8.625 12.5 8.625C11.8787 8.625 11.375 8.12132 11.375 7.5C11.375 6.87868 11.8787 6.375 12.5 6.375C13.1213 6.375 13.625 6.87868 13.625 7.5Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                                    </svg>
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem>
                                    <Edit className="mr-2 h-4 w-4" />
                                    Modifier
                                  </DropdownMenuItem>
                                  <DropdownMenuItem className="text-destructive">
                                    <Trash className="mr-2 h-4 w-4" />
                                    Supprimer
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
