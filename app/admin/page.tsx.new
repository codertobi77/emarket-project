"use client";

import { useState, useEffect } from "react";
import { Header } from "@/components/header";
import { Footer } from "@/components/footer";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { User, Market, Product } from "@/types";
import { 
  Users, Store, ShoppingBag, Package, Plus, Edit, Trash, UserPlus, 
  Settings, Building, MapPin, ArrowRight, BarChart, PieChart, 
  Clock, RefreshCw, Download, Filter, ChevronRight, Bell, Moon, 
  Languages, Database, Save, Trash2, Zap
} from "lucide-react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Switch } from "@/components/ui/switch";
import { cn } from "@/lib/utils";
import RoleProtected from "@/components/RoleProtected";

export default function AdminDashboardPage() {
  const [activeTab, setActiveTab] = useState('overview');
  const [users, setUsers] = useState<User[]>([]);
  const [markets, setMarkets] = useState<Market[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [locations, setLocations] = useState<{ id: number; name: string }[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  
  // Statistiques
  const stats = [
    {
      title: 'Utilisateurs',
      value: users.length,
      icon: Users,
      color: 'from-blue-500 to-cyan-400',
      textColor: 'text-blue-500'
    },
    {
      title: 'Marchés',
      value: markets.length,
      icon: Store,
      color: 'from-emerald-500 to-teal-400',
      textColor: 'text-emerald-500'
    },
    {
      title: 'Produits',
      value: products.length,
      icon: ShoppingBag,
      color: 'from-purple-500 to-indigo-400',
      textColor: 'text-purple-500'
    },
    {
      title: 'Localisations',
      value: locations.length,
      icon: MapPin,
      color: 'from-amber-500 to-orange-400',
      textColor: 'text-amber-500'
    }
  ];
  
  // Fonction pour préparer le chemin d'image pour l'avatar de l'utilisateur
  const getProfileImage = (imagePath: string | undefined) => {
    if (!imagePath) return '';
    
    if (imagePath.startsWith('public/assets/')) {
      return `/${imagePath.split('public/')[1]}`;
    } else if (imagePath.startsWith('/')) {
      return `/assets${imagePath}`;
    } else if (imagePath.includes('assets/')) {
      return `/${imagePath}`;
    } else {
      return `/assets/users-img/${imagePath}`;
    }
  };

  // État pour les dialogues
  const [isCreateUserDialogOpen, setIsCreateUserDialogOpen] = useState(false);
  const [isCreateMarketDialogOpen, setIsCreateMarketDialogOpen] = useState(false);
  const [isUpdateMarketDialogOpen, setIsUpdateMarketDialogOpen] = useState(false);
  const [isDeleteMarketDialogOpen, setIsDeleteMarketDialogOpen] = useState(false);
  
  // État pour les formulaires
  const [newUser, setNewUser] = useState({
    name: "",
    email: "",
    password: "",
    role: "USER",
    image: ""
  });
  
  const [newMarket, setNewMarket] = useState({
    name: "",
    location: "",
    description: "",
    managerId: "",
    image: ""
  });
  
  const [updatedMarket, setUpdatedMarket] = useState<Market>({
    id: "",
    name: "",
    location: "",
    description: "",
    managerId: "",
    image: "",
    marketSellers: [],
    createdAt: new Date(),
    updatedAt: new Date(),
    manager: {} as User
  });
  
  const [deletedMarket, setDeletedMarket] = useState<Market>();

  // Chargement des données
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        // Chargement des utilisateurs
        const usersResponse = await fetch('/api/users');
        const usersData = await usersResponse.json();
        setUsers(usersData);
        
        // Chargement des marchés
        const marketsResponse = await fetch('/api/markets');
        const marketsData = await marketsResponse.json();
        setMarkets(marketsData);
        
        // Chargement des produits
        const productsResponse = await fetch('/api/products');
        const productsData = await productsResponse.json();
        setProducts(productsData);
        
        // Chargement des localisations
        const locationsResponse = await fetch('/api/locations');
        const locationsData = await locationsResponse.json();
        setLocations(locationsData);
      } catch (error) {
        console.error('Erreur lors du chargement des données:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, []);

  // Gestionnaires d'événements
  const handleCreateUser = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newUser),
      });
      
      if (response.ok) {
        const createdUser = await response.json();
        setUsers([...users, createdUser]);
        setIsCreateUserDialogOpen(false);
        setNewUser({
          name: "",
          email: "",
          password: "",
          role: "USER",
          image: ""
        });
      }
    } catch (error) {
      console.error('Erreur lors de la création de l\'utilisateur:', error);
    }
  };
  
  const handleCreateMarket = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/markets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newMarket),
      });
      
      if (response.ok) {
        const createdMarket = await response.json();
        setMarkets([...markets, createdMarket]);
        setIsCreateMarketDialogOpen(false);
        setNewMarket({
          name: "",
          location: "",
          description: "",
          managerId: "",
          image: ""
        });
      }
    } catch (error) {
      console.error('Erreur lors de la création du marché:', error);
    }
  };
  
  const handleUpdateMarket = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch(`/api/markets/${updatedMarket.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedMarket),
      });
      
      if (response.ok) {
        const updatedMarketData = await response.json();
        setMarkets(markets.map(market => 
          market.id === updatedMarketData.id ? updatedMarketData : market
        ));
        setIsUpdateMarketDialogOpen(false);
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour du marché:', error);
    }
  };
  
  const handleDeleteMarket = async () => {
    if (!deletedMarket) return;
    
    try {
      const response = await fetch(`/api/markets/${deletedMarket.id}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        setMarkets(markets.filter(market => market.id !== deletedMarket.id));
        setIsDeleteMarketDialogOpen(false);
        setDeletedMarket(undefined);
      }
    } catch (error) {
      console.error('Erreur lors de la suppression du marché:', error);
    }
  };

  // Affichage du chargement
  if (isLoading) {
    return (
      <div className="flex flex-col min-h-screen bg-gradient-to-b from-background to-muted/20">
        <Header />
        <main className="flex-1 container py-8 flex items-center justify-center">
          <div className="flex flex-col items-center gap-4">
            <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary"></div>
            <p className="text-muted-foreground">Chargement des données...</p>
          </div>
        </main>
        <Footer />
      </div>
    );
  }
