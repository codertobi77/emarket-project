  // Rendu principal
  return (
    <RoleProtected allowedRoles={["ADMIN"]}>
      <div className="flex flex-col min-h-screen bg-gradient-to-b from-background to-muted/20">
        <Header />
        <main className="flex-1 container py-8">
          {/* En-tête de la page */}
          <div className="mb-8">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent">
              Tableau de bord administrateur
            </h1>
            <p className="text-muted-foreground mt-2">
              Gérez les utilisateurs, marchés, produits et paramètres système
            </p>
            <div className="flex gap-4 mt-6">
              <Button 
                onClick={() => setIsCreateUserDialogOpen(true)}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-md hover:shadow-lg"
              >
                <UserPlus className="mr-2 h-4 w-4" />
                Ajouter un utilisateur
              </Button>
              <Button 
                onClick={() => setIsCreateMarketDialogOpen(true)}
                className="bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700 transition-all duration-200 shadow-md hover:shadow-lg"
              >
                <Building className="mr-2 h-4 w-4" />
                Ajouter un marché
              </Button>
            </div>
          </div>
          
          {/* Cartes de statistiques */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {stats.map((stat, index) => (
              <Card key={index} className="overflow-hidden border-none shadow-md hover:shadow-lg transition-all duration-200">
                <CardHeader className={`bg-gradient-to-r ${stat.color} text-white p-4 flex flex-row items-center justify-between`}>
                  <CardTitle className="text-xl font-semibold">{stat.title}</CardTitle>
                  <div className="p-2 bg-white/20 rounded-full">
                    <stat.icon className="h-6 w-6" />
                  </div>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <p className={`text-3xl font-bold ${stat.textColor}`}>{stat.value}</p>
                    <div className="flex items-center text-sm text-muted-foreground">
                      <ArrowRight className="h-4 w-4 mr-1" />
                      <span>Voir détails</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
          
          {/* Navigation par onglets */}
          <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="bg-muted/50 p-1">
              <TabsTrigger value="overview" className="data-[state=active]:bg-background">
                Aperçu
              </TabsTrigger>
              <TabsTrigger value="users" className="data-[state=active]:bg-background">
                Utilisateurs
              </TabsTrigger>
              <TabsTrigger value="markets" className="data-[state=active]:bg-background">
                Marchés
              </TabsTrigger>
              <TabsTrigger value="products" className="data-[state=active]:bg-background">
                Produits
              </TabsTrigger>
              <TabsTrigger value="reports" className="data-[state=active]:bg-background">
                Rapports
              </TabsTrigger>
              <TabsTrigger value="settings" className="data-[state=active]:bg-background">
                Paramètres
              </TabsTrigger>
            </TabsList>
            
            {/* Onglet Aperçu */}
            <TabsContent value="overview" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Utilisateurs récents */}
                <Card className="shadow-md hover:shadow-lg transition-all duration-200">
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <CardTitle>Utilisateurs récents</CardTitle>
                      <Button variant="ghost" size="sm" onClick={() => setActiveTab('users')} className="text-primary">
                        <span>Voir tout</span>
                        <ChevronRight className="ml-1 h-4 w-4" />
                      </Button>
                    </div>
                    <CardDescription>Les 5 derniers utilisateurs ajoutés</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {users.slice(0, 5).map((user) => (
                        <div key={user.id} className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <Avatar>
                              <AvatarImage src={getProfileImage(user.image)} alt={user.name} />
                              <AvatarFallback>{user.name.substring(0, 2).toUpperCase()}</AvatarFallback>
                            </Avatar>
                            <div>
                              <p className="font-medium">{user.name}</p>
                              <p className="text-sm text-muted-foreground">{user.email}</p>
                            </div>
                          </div>
                          <Badge variant={user.role === 'ADMIN' ? 'destructive' : user.role === 'MANAGER' ? 'default' : 'secondary'}>
                            {user.role}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
                
                {/* Marchés récents */}
                <Card className="shadow-md hover:shadow-lg transition-all duration-200">
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <CardTitle>Marchés récents</CardTitle>
                      <Button variant="ghost" size="sm" onClick={() => setActiveTab('markets')} className="text-primary">
                        <span>Voir tout</span>
                        <ChevronRight className="ml-1 h-4 w-4" />
                      </Button>
                    </div>
                    <CardDescription>Les 5 derniers marchés ajoutés</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {markets.slice(0, 5).map((market) => (
                        <div key={market.id} className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className="w-10 h-10 rounded-md overflow-hidden">
                              <img 
                                src={
                                  market.image?.startsWith('/markets-img/') ? `/assets${market.image}` :
                                  market.image?.includes('public/assets/') ? `/${market.image.split('public/')[1]}` :
                                  market.image?.includes('assets/') ? `/${market.image}` :
                                  market.image ? `/assets/markets-img/${market.image.split('/').pop()}` :
                                  "https://images.pexels.com/photos/2292919/pexels-photo-2292919.jpeg"
                                } 
                                alt={market.name}
                                className="w-full h-full object-cover"
                                onError={(e) => {
                                  (e.target as HTMLImageElement).src = "https://images.pexels.com/photos/2292919/pexels-photo-2292919.jpeg";
                                }}
                              />
                            </div>
                            <div>
                              <p className="font-medium">{market.name}</p>
                              <p className="text-sm text-muted-foreground">{market.location}</p>
                            </div>
                          </div>
                          <Badge variant="outline" className="bg-emerald-50 text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-400">
                            <MapPin className="mr-1 h-3 w-3" />
                            {market.location}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
              
              {/* Statistiques d'activité */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="shadow-md hover:shadow-lg transition-all duration-200">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle>Activité utilisateurs</CardTitle>
                      <div className="p-1.5 bg-muted rounded-md">
                        <BarChart className="h-4 w-4 text-muted-foreground" />
                      </div>
                    </div>
                    <CardDescription>Tendances d'activité sur 30 jours</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[200px] flex items-end justify-between gap-2">
                      {Array.from({ length: 14 }).map((_, i) => {
                        const height = Math.random() * 100;
                        return (
                          <div key={i} className="relative group">
                            <div 
                              className="w-5 bg-gradient-to-t from-blue-500 to-indigo-600 rounded-t-sm transition-all duration-300 group-hover:from-blue-600 group-hover:to-indigo-700" 
                              style={{ height: `${height}%` }}
                            ></div>
                            <div className="absolute -top-8 left-1/2 -translate-x-1/2 bg-popover text-popover-foreground px-2 py-1 rounded text-xs opacity-0 group-hover:opacity-100 transition-opacity">
                              {Math.round(height)}%
                            </div>
                          </div>
                        );
                      })}
                    </div>
                    <div className="flex items-center justify-between mt-6 text-sm text-muted-foreground">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                        <span>Connexions</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <RefreshCw className="h-3 w-3" />
                        <span>Mis à jour il y a 2h</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                <Card className="shadow-md hover:shadow-lg transition-all duration-200">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle>Performance des marchés</CardTitle>
                      <div className="p-1.5 bg-muted rounded-md">
                        <PieChart className="h-4 w-4 text-muted-foreground" />
                      </div>
                    </div>
                    <CardDescription>Par localisation</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-center h-[200px]">
                      <div className="relative w-32 h-32">
                        <svg viewBox="0 0 100 100" className="w-full h-full">
                          <circle cx="50" cy="50" r="40" fill="none" stroke="#e2e8f0" strokeWidth="15" />
                          <circle 
                            cx="50" 
                            cy="50" 
                            r="40" 
                            fill="none" 
                            stroke="url(#gradient)" 
                            strokeWidth="15" 
                            strokeDasharray="251.2" 
                            strokeDashoffset="50.24" 
                            transform="rotate(-90 50 50)" 
                          />
                          <defs>
                            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                              <stop offset="0%" stopColor="#10b981" />
                              <stop offset="100%" stopColor="#14b8a6" />
                            </linearGradient>
                          </defs>
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-2xl font-bold">80%</span>
                        </div>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4 mt-6">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-emerald-500"></div>
                        <span className="text-sm">Paris</span>
                        <span className="text-sm font-semibold ml-auto">45%</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                        <span className="text-sm">Lyon</span>
                        <span className="text-sm font-semibold ml-auto">25%</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-purple-500"></div>
                        <span className="text-sm">Marseille</span>
                        <span className="text-sm font-semibold ml-auto">20%</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-amber-500"></div>
                        <span className="text-sm">Autres</span>
                        <span className="text-sm font-semibold ml-auto">10%</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            {/* Onglet Utilisateurs */}
            <TabsContent value="users" className="space-y-6">
              <Card className="shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle>Liste des utilisateurs</CardTitle>
                    <Button 
                      onClick={() => setIsCreateUserDialogOpen(true)}
                      size="sm"
                      className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 transition-all duration-200"
                    >
                      <UserPlus className="mr-2 h-4 w-4" />
                      Ajouter
                    </Button>
                  </div>
                  <CardDescription>Gérez tous les utilisateurs de la plateforme</CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Utilisateur</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>Rôle</TableHead>
                        <TableHead>Date d'inscription</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {users.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center">
                            Aucun utilisateur trouvé
                          </TableCell>
                        </TableRow>
                      ) : (
                        users.map((user) => (
                          <TableRow key={user.id}>
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <Avatar>
                                  <AvatarImage src={getProfileImage(user.image)} alt={user.name} />
                                  <AvatarFallback>{user.name.substring(0, 2).toUpperCase()}</AvatarFallback>
                                </Avatar>
                                <div>
                                  <p className="font-medium">{user.name}</p>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>{user.email}</TableCell>
                            <TableCell>
                              <Badge variant={user.role === 'ADMIN' ? 'destructive' : user.role === 'MANAGER' ? 'default' : 'secondary'}>
                                {user.role}
                              </Badge>
                            </TableCell>
                            <TableCell>{new Date(user.createdAt).toLocaleDateString()}</TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-4 w-4">
                                      <path d="M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM13.625 7.5C13.625 8.12132 13.1213 8.625 12.5 8.625C11.8787 8.625 11.375 8.12132 11.375 7.5C11.375 6.87868 11.8787 6.375 12.5 6.375C13.1213 6.375 13.625 6.87868 13.625 7.5Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                                    </svg>
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem>
                                    <Edit className="mr-2 h-4 w-4" />
                                    Modifier
                                  </DropdownMenuItem>
                                  <DropdownMenuItem className="text-destructive">
                                    <Trash className="mr-2 h-4 w-4" />
                                    Supprimer
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>
